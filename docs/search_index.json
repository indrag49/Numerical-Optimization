[["solving-one-dimensional-optimization-problems.html", "Chapter 3 Solving One Dimensional Optimization Problems 3.1 One Dimensional Optimization Problems 3.2 What is a Unimodal Function? 3.3 Fibonacci Search Method", " Chapter 3 Solving One Dimensional Optimization Problems This chapter introduces the detailed study on various algorithms for solving one dimensional optimization problems. The classes of methods that have been discussed are: Elimination method, Interpolation method and Direct Root Finding method. The Elimination method covers the Fibonacci Search method and the Golden Section Search method; the Interpolation method covers Quadratic Interpolation and Inverse Quadratic Interpolation methods; and the Direct Root Finding method covers Newtons method, Halleys method, Secant method and Bisection method. Finally a combination of some of these methods called the Brents method has also been discussed. Python programs involving the functions provided by the scipy.optimize module for solving problems using the above algorithms have also been provided. For the Fibonacci Search method and the Inverse Quadratic Interpolation method, full Python programs have been written for assisting the readers. 3.1 One Dimensional Optimization Problems The aim of this chapter is to introduce methods for solving one-dimensional optimization tasks, formulated in the following way: \\[\\begin{equation} f(x^*)=\\underset{x}{\\min\\ }f(x), x \\in \\mathbb{R} \\tag{3.1} \\end{equation}\\] where, \\(f\\) is a nonlinear function. The understanding of these optimization tasks and algorithms will be generalized in solving unconstrained optimization tasks involving objective function of multiple variables, in the future chapters. 3.2 What is a Unimodal Function? Definition 3.1 A function \\(f(x)\\), where \\(x \\in \\mathbb{R}\\) is said to be unimodal [refer to https://math.mit.edu/~rmd/465/unimod-dip-bds.pdf] if for a value \\(x^*\\) on the real line, the following conditions are satisfied: * \\(f\\) is monotonically decreasing for \\(x \\leq v\\), * \\(f\\) is monotonically increasing for \\(x \\geq v\\), and * if the above two conditions are satisfied, then \\(f(x^*)\\) is the minimum value of \\(f(x)\\), and \\(x^*\\) is the minimizer of \\(f\\). Let us have a look into the figure below. We have taken the quadratic function of one variable: \\(f(x) = 5x^2-3x+2\\). It is a nonlinear unimodal function defined over the interval \\([-2,2]\\), denoted by the dotted lines on either side.. The minimizer \\(x^*=0.3\\) (which can be solved analytically!), given by the middle dotted line, lies inside the interval \\([x_l, x_r]=[-2,2]\\). We notice that \\(f(x)\\) strictly decreases for \\(f(x) &lt; f(x^*)\\) and strictly increases for \\(f(x) &gt; f(x^*)\\). The interval \\([x_l, x_r]\\) that has the minimizer within it, is called the interval of uncertainty and the goal of an optimization algorithm is to reduce this interval as much as possible to converge towards the minimizer. A good algorithm completes the convergence very fast. In each step of this reduction of the interval, the algorithm finds a new unimodal interval following the following procedures: Choose two new points, \\(x_1 \\in [x_l, x^*]\\) and another point \\(x_2 \\in [x^*, x_r]\\) (denoted by the two filled straight lines in the figure, If \\(f(x_2) &gt; f(x_1)\\), the new interval becomes \\([x_l, x_2]\\) and \\(x_r\\) becomes \\(x_2\\), i.e, \\(x_r=x_2\\), Next pick a new \\(x_2\\), If condition in step (2) is not satisfied, we set the new interval as \\([x_1, x_r]\\) directly after step (1) and set \\(x_l=x_1\\), and Next pick a new \\(x_1\\). The given steps continue iteratively until the convergence is satisfied to a given limit of the minimizer. These class of methods is called an and we study two categories under this kind: Fibonacci Search, and Golden Section Search. Raos book Engineering Optimization [Rao, Singiresu S. Engineering optimization: theory and practice. John Wiley &amp; Sons, 2019.] also has some detailed studies on these kinds of optimization methods. 3.3 Fibonacci Search Method Instead of finding the exact minimizer \\(x^*\\) of \\(f(x)\\), the works by reducing the interval of uncertainty in every step, ultimately converging the interval, containing the minimizer, to a desired size as small as possible. One caveat is that, the initial interval containing, such that the interval lies in it, has to be known beforehand. However, the algorithm works on a nonlinear function, even if it is discontinuous. The name comes from the fact that the algorithm makes use of the famous sequence of Fibonacci numbers [http://oeis.org/A000045]. This sequence is defined in the following way: \\[\\begin{align} F_0&amp;=0,F_1=1, \\\\ F_n&amp;=F_{n-1} + F_{n-2},\\text{ where }n=2,3,\\ldots \\end{align}\\] We write a Python code to generate the first 16 Fibonacci numbers and display them as a table: import pandas as pd import numpy as np def fibonacci(n): # define the function fn = [0, 1,] for i in range(2, n+1): fn.append(fn[i-1] + fn[i-2]) return fn N = np.arange(16) data = {&#39;n&#39;: N, &#39;Fibonacci(n)&#39;: fibonacci(15)} df = pd.DataFrame(data) df looks like this: ## +----+-----+----------------+ ## | | n | Fibonacci(n) | ## |----+-----+----------------| ## | 0 | 0 | 0 | ## | 1 | 1 | 1 | ## | 2 | 2 | 1 | ## | 3 | 3 | 2 | ## | 4 | 4 | 3 | ## | 5 | 5 | 5 | ## | 6 | 6 | 8 | ## | 7 | 7 | 13 | ## | 8 | 8 | 21 | ## | 9 | 9 | 34 | ## | 10 | 10 | 55 | ## | 11 | 11 | 89 | ## | 12 | 12 | 144 | ## | 13 | 13 | 233 | ## | 14 | 14 | 377 | ## | 15 | 15 | 610 | ## +----+-----+----------------+ Let \\(n\\) be the total number of experiments to be conducted and \\([x_l, x_r]\\) be the initial interval the algorithm starts with. Let \\[\\begin{eqnarray} L_0 = x_r - x_l \\tag{3.2} \\end{eqnarray}\\] be the initial level of uncertainty and let us define, \\[\\begin{eqnarray} L_j = \\frac{F_{n-2}}{F_n}L_0 \\tag{3.3} \\end{eqnarray}\\] where, \\(F_{n-2}\\) and \\(F_n\\) are the \\((n-2)^{th}\\) and \\(n^{th}\\) Fibonacci numbers respectively. We see from the formulation of the Fibonacci numbers that, (3.3) shows the following property: \\[\\begin{equation} L_j = \\frac{F_{n-2}}{F_n}L_0 \\leq \\frac{L_0}{2} \\text{ for } n\\geq 2 \\end{equation}\\] Now, the initial two experiments are set at points \\(x_1\\) and \\(x_2\\), where, \\(L_j = x_1 - x_l\\) and \\(L_j = x_r - x_2\\). So, combining these with Eq.(3.3), we have: \\[\\begin{equation} x_1 = x_l + \\frac{F_{n-2}}{F_n}L_0 \\tag{3.4} \\end{equation}\\] and \\[\\begin{equation} x_2 = x_r - \\frac{F_{n-2}}{F_n}L_0 \\tag{3.5} \\end{equation}\\] Now taking into consideration the unimodality assumption, a part of the interval of uncertainty is rejected, shrinking it to a smaller size, given by, \\[\\begin{equation} L_i = L_0 - L_j = L_0(1-\\frac{F_{n-2}}{F_n}) = \\frac{F_{n-1}}{F_n}L_0 \\tag{3.6} \\end{equation}\\] where, we have used the fact that, \\(F_n - F_{n-2} = F_{n-1}\\) from the formulation of the Fibonacci numbers. This procedure leaves us with only one experiment, which, from one end, is situated at a distance of \\[\\begin{equation} L_j = \\frac{F_{n-2}}{F_n}L_0 = \\frac{F_{n-2}}{F_{n-1}}L_i \\tag{3.7} \\end{equation}\\] where, we have used Eq.(3.3). From the other end, the same experiment point is situated at a distance give by, \\[\\begin{equation} L_i-L_j = \\frac{F_{n-3}}{F_n}L_0 = \\frac{F_{n-3}}{F_n}L_0 = \\frac{F_{n-3}}{F_{n-1}}L_2 \\tag{3.8} \\end{equation}\\] where, we have again used Eq.(3.3). We now place a new experiment point in the interval \\(L_i\\) so that both the present experiment points are situated at a distance given by Eq.(3.7). We again reduce the size of the interval of uncertainty using the unimodality conditions. This whole process is continued so that for the \\(k^{th}\\) experiment point, its location is given by, \\[\\begin{equation} L_{k[j]} = \\frac{F_{n-k}}{F_{n-(k-2)}}L_{k-1} \\tag{3.9} \\end{equation}\\] and the interval of uncertainty is given by, \\[\\begin{equation} l_{k[i]} = \\frac{F_{n-(k-1)}}{F_n}L_0 \\tag{3.10} \\end{equation}\\] after \\(k\\) iterations are completed. Now, the given by the ratio of the present interval of uncertainty after conduction \\(k\\) iterations out of the \\(n\\) experiments to be performed, \\(L_{k[i]}\\) to the initial interval of uncertainty, \\(L_0\\): \\[\\begin{equation} R = \\frac{L_{k[i]}}{L_0} = \\frac{F_{n-(k-1)}}{F_n} \\tag{3.11} \\end{equation}\\] The purpose of this algorithm is to bring \\(R \\sim 0\\). The Fibonacci Search Algorithm has been shown below: We will write a Python function that implements the above algorithm def fib_search(f, xl, xr, n): F = fibonacci(n) # Call the fibonnaci number function L0 = xr - xl # Initial interval of uncertainty R1 = L0 # Initial Reduction Ratio Li = (F[n-2]/F[n])*L0 R = [Li/L0] for i in range(2, n+1): if Li &gt; L0/2: x1 = xr - Li x2 = xl + Li else: x1 = xl + Li x2 = xr - Li f1, f2 = f(x1), f(x2) if f1 &lt; f2: xr = x2 Li = (F[n - i]/F[n - (i - 2)])*L0 # New interval of uncertainty elif f1 &gt; f2: xl = x1 Li = (F[n - i]/F[n - (i - 2)])*L0 # New interval of uncertainty else: xl, xr = x1, x2 Li = (F[n - i]/F[n - (i - 2)])*(xr - xl) # New interval of uncertainty L0 = xr - xl R += [Li/R1,] # Append the new reduction ratio if f1 &lt;= f2: return [x1, f(x1), R] # Final result else: return [x2, f(x2), R] # Final result Example 3.1 Let an objective function be: \\[\\begin{equation} f(x) = x^5 - 5x^3 - 20x + 5 \\tag{3.12} \\end{equation}\\] We will use the Fibonacci search algorithm to find the minimizer \\(x^*\\), taking \\(n=25\\) and the initial interval of uncertainty \\([-2.5, 2.5]\\). Lets write a Python function to define the given objective function and visualize the same: def f(x): # Objective function return x**5 - 5*x**3 - 20*x + 5 x = np.linspace(-3, 3, 100) plt.plot(x, f(x), &#39;r-&#39;) plt.xlabel(&#39;x -&gt;&#39;) plt.ylabel(&#39;f(x) -&gt;&#39;) plt.show() Now, we use the function fib_search(f, -2.5, 2.5, 25) to run the optimization and print the results: Fib = fib_search(f, -2.5, 2.5, 25) x_star, f_x_star, R = Fib print (&quot;x*:&quot;, x_star) ## x*: 1.999966677774075 print (&quot;f(x*):&quot;, f_x_star) ## f(x*): -42.99999994448275 print (&quot;Final Reduction Ratio:&quot;, R[-1]) ## Final Reduction Ratio: 0.0 ## n xl xr f(x1) f(x2) Reduction Ratio ## 0 0 -2.50000 2.50000 35.468750 -25.468750 0.38197 ## 1 1 -0.59017 2.50000 17.759586 -7.759586 0.38197 ## 2 2 0.59017 2.50000 -7.759586 -28.881854 0.23607 ## 3 3 1.31966 2.50000 -28.881854 -40.762632 0.14590 ## 4 4 1.77051 2.50000 -40.762632 -42.874998 0.09017 ## 5 5 1.77051 2.22136 -42.874998 -40.145824 0.05573 ## 6 6 1.94272 2.22136 -42.842416 -42.874998 0.03444 ## 7 7 1.94272 2.11493 -42.874998 -42.284678 0.02129 ## 8 8 1.94272 2.04915 -42.996368 -42.874998 0.01316 ## 9 9 1.98337 2.04915 -42.986336 -42.996368 0.00813 ## 10 10 1.98337 2.02403 -42.996368 -42.970650 0.00502 ## 11 11 1.98337 2.00850 -42.999940 -42.996368 0.00311 ## 12 12 1.99297 2.00850 -42.997540 -42.999940 0.00192 ## 13 13 1.99297 2.00257 -42.999940 -42.999670 0.00119 ## 14 14 1.99663 2.00257 -42.999435 -42.999940 0.00073 ## 15 15 1.99890 2.00257 -42.999940 -42.999996 0.00045 ## 16 16 1.99890 2.00117 -42.999996 -42.999932 0.00028 ## 17 17 1.99890 2.00030 -42.999997 -42.999996 0.00017 ## 18 18 1.99943 2.00030 -42.999984 -42.999997 0.00011 ## 19 19 1.99977 2.00030 -42.999997 -43.000000 0.00007 ## 20 20 1.99977 2.00010 -43.000000 -43.000000 0.00004 ## 21 21 1.99990 2.00010 -43.000000 -43.000000 0.00003 ## 22 22 1.99990 2.00003 -43.000000 -43.000000 0.00001 ## 23 23 1.99997 1.99997 -43.000000 -43.000000 0.00000 ## 24 24 1.99997 1.99997 -43.000000 -43.000000 0.00000 ## [1.999966677774075, -42.99999994448275, [0.3819660113295568, 0.3819660113295568, 0.23606797734088633, 0.14589803398867046, 0.09016994335221593, 0.05572809063645452, 0.0344418527157614, 0.0212862379206931, 0.01315561479506831, 0.008130623125624776, 0.005024991669443516, 0.0031056314561812774, 0.0019193602132622563, 0.0011862712429190209, 0.0007330889703432183, 0.00045318227257580253, 0.00027990669776741585, 0.00017327557480838668, 0.0001066311229590291, 6.664445184937448e-05, 3.9986671109637494e-05, 2.665778073975389e-05, 1.3328890369882865e-05, 0.0, 0.0]] "]]
