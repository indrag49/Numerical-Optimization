[["conjugate-gradient-methods-1.html", "Chapter 5 Conjugate Gradient Methods 5.1 Introduction to Conjugate Gradient Methods 5.2 Linear Conjugate Gradient Algorithm", " Chapter 5 Conjugate Gradient Methods This chapter is dedicated to studying the Conjugate Gradient Methods in detail. The Linear and Non-linear versions of the CG methods have been discussed with five sub classes falling under the nonlinear CG method class. The five nonlinear CG methods that have been discussed are: Flethcher-Reeves method, Polak-Ribiere method, Hestenes-Stiefel method, Dai-Yuan method and Hager-Zhang method. Mathematical proofs have been provided wherever necessary. Python implementations of the algorithms have been included along with optimization examples. The chapter ends with introducing a specific Python function called the scipy.optimize.minimize() function that can be used to work with the Polak-Ribiere CG method. 5.1 Introduction to Conjugate Gradient Methods The conjugate gradient methods are frequently used for solving large linear systems of equations and also for solving nonlinear optimization problems. This let us characterize the conjugate gradient methods into two classes: Linear Conjugate Gradient Method: This is an iterative method to solve large linear systems where the coefficient matrices are positive definite. This can be treated as a replacement of the Gaussian elimination method in numerical analysis. nonlinear Conjugate Gradient method: This is used for solving nonlinear optimization problems. We will study five methods under this class: Fletcher-Reeves algorithm, Polak-Ribiere algorithm, Hestenes-Stiefel algorithm, Dai-Yuan algorithm, and Hager-Zhang algorithm. 5.2 Linear Conjugate Gradient Algorithm Suppose we want to find the minimizer of an objective function, having the quadratic form: \\[\\begin{equation} f(\\mathbb{x}) = \\frac{1}{2}\\mathbb{x}^T\\mathbb{A}\\mathbb{x} - \\mathbb{b}^T\\mathbb{x} \\tag{5.1} \\end{equation}\\] where, \\(\\mathbb{A}\\) is a \\(n \\times n\\) symmetric positive definite matrix.The problem can be formulated as: \\[\\begin{equation} \\underset{\\mathbb{x}\\in \\mathbb{R}^n}{\\min} f(\\mathbb{x}) = \\frac{1}{2}\\mathbb{x}^T\\mathbb{A}\\mathbb{x} - \\mathbb{b}^T\\mathbb{x} \\tag{5.2} \\end{equation}\\] Eq. (5.2) can be equivalently stated as the problem of solving the linear system of equations given by: \\[\\begin{equation} \\mathbb{A}\\mathbb{x} = \\mathbb{b} \\tag{5.3} \\end{equation}\\] We use the linear conjugate gradient method to solve Eq. (5.3). The residual of a linear system of equations, given by Eq. (5.3) is defined as: \\[\\begin{equation} r(\\mathbb{x}) = \\mathbb{A}\\mathbb{x} - \\mathbb{b} \\tag{5.4} \\end{equation}\\] Theorem 5.1 The gradient of the objective function given by Eq. (5.1) is equal to the residual of the linear system given by Eq. (5.4). Proof. From Eq. (5.1), we see that the gradient of the objective function is: \\[\\begin{equation} \\nabla f(\\mathbb{x}) = \\mathbb{A}\\mathbb{x} - \\mathbb{b} = r(\\mathbb{x}) \\tag{5.5} \\end{equation}\\] This proves the theorem. 5.2.1 Mutual Conjugacy For a given symmetric positive definite matrix \\(\\mathbb{A}\\), two vectors \\(\\mathbb{v}, \\mathbb{w} \\neq \\mathbb{0} \\in \\mathbb{R}^n\\) are defined to be mutually conjugate if the following condition is satisfied: \\[\\begin{equation} \\mathbb{v}^T\\mathbb{A}\\mathbb{w} = 0 \\tag{5.6} \\end{equation}\\] Theorem 5.2 A set of mutually conjugate vectors \\(\\mathbb{v}_j, j=1, 2, \\ldots\\) with respect to a positive definite symmetric matrix \\(\\mathbb{A}\\), forms a basis in \\(\\mathbb{R}^n\\), i.e., the set is linearly independent. Proof. Above theorem equivalently states that, for \\(\\mathbb{x} \\in \\mathbb{R}^n\\), the following condition is satisfied: \\[\\begin{equation} \\mathbb{x} = \\sum_{j=1}^n\\lambda_j\\mathbb{v}_j \\tag{5.7} \\end{equation}\\] where, \\[\\begin{equation} \\lambda_j = \\frac{\\mathbb{v}_j^T\\mathbb{A}\\mathbb{x}}{\\mathbb{v}_j^T\\mathbb{A}\\mathbb{v}_j} \\tag{5.8} \\end{equation}\\] Let us consider the linear combination, \\[\\begin{equation} \\sum_{j=1}^n c_j\\mathbb{v}_j = \\mathbb{0} \\tag{5.9} \\end{equation}\\] Multiplying the above equation with the matrix \\(\\mathbb{A}\\), we have, \\[\\begin{equation} \\sum_{j=1}^n c_j \\mathbb{A}\\mathbb{v}_j=\\mathbb{0} \\tag{5.10} \\end{equation}\\] Since the vectors \\(\\mathbb{v}_j\\) are mutually conjugate with respect to the matrix \\(\\mathbb{A}\\), from Eq. (5.6), we can write that, \\[\\begin{equation} c_j\\mathbb{v}_j^T\\mathbb{A}\\mathbb{v}_j = 0 \\tag{5.11} \\end{equation}\\] From the facts that \\(\\mathbb{A}\\) is positive definite and that \\(\\mathbb{v}_j\\) never equals \\(\\mathbb{0}\\), from Eq. (5.11) we can state that, \\(c_j=0\\) for \\(j=1, 2, \\ldots, n\\). This proves the fact that the set of vectors \\(\\mathbb{v}_j\\) is linearly independent and may be used as a basis. Therefore, there exists a unique set \\(\\lambda_j, j=1, 2, \\ldots, n\\) for any \\(\\mathbb{x} \\in \\mathbb{R}^n\\), such that Eq. (5.7) is satisfied. The positive definiteness of \\(\\mathbb{A}\\) leads to the fact that, \\[\\begin{equation} \\mathbb{v}_j^T\\mathbb{A}\\mathbb{x} = \\lambda_j\\mathbb{v}_j^T\\mathbb{A}\\mathbb{x} \\tag{5.12} \\end{equation}\\] Finally, from Eq. (5.12) we can write that, \\[\\begin{equation} \\lambda_j = \\frac{\\mathbb{v}_j^T\\mathbb{A}\\mathbb{x}}{\\mathbb{v}_j^T\\mathbb{A}\\mathbb{v}_j} \\tag{5.13} \\end{equation}\\] The proves the theorem. 5.2.2 Conjugate Direction Algorithm For our optimization task, where we aim to minimize the objective function \\(f(\\mathbb{x})\\), where \\(\\mathbb{x} \\in \\mathbb{R}^n\\), let \\(\\mathbb{x}_0\\) be the starting iterate and the conjugate directions be set as \\({\\mathbb{\\delta}_j}, j=1, 2, \\ldots, n-1\\). The successive iterates are generated by following: \\[\\begin{equation} \\mathbb{x}_j = \\mathbb{x}_{j-1}+\\beta_j\\mathbb{\\delta}_j \\tag{5.14} \\end{equation}\\] This \\(\\beta_j\\) is the minimizer of the function \\(f(\\mathbb{x}_{j-1}+\\beta\\delta_j)\\). We will now find the explicit form of \\(\\beta_j\\). From Eq. (5.1) we can write that, \\[\\begin{align} f(x_{j-1}+\\beta \\mathbb{\\delta}_j) &amp;= \\frac{1}{2}[(\\mathbb{x}_{j-1}+\\beta\\mathbb{\\delta}_j)^T\\mathbb{A}(\\mathbb{x}_{j-1}+\\beta\\mathbb{\\delta}_j)] - \\mathbb{b}^T(\\mathbb{x}_{j-1}+\\beta\\mathbb{\\delta}_j) \\nonumber \\\\ &amp;= \\frac{1}{2}[\\mathbb{x}_{j-1}^T\\mathbb{A}\\mathbb{x}_{j-1}+2\\beta\\mathbb{x}_{j-1}^T\\mathbb{A}\\mathbb{\\delta}_j + \\beta^2\\mathbb{\\delta}_j^T\\mathbb{A}\\mathbb{\\delta}_j] - \\mathbb{b}^T(\\mathbb{x}_{j-1}+\\beta\\mathbb{\\delta}_j) \\tag{5.15} \\end{align}\\] Now, differentiating Eq. (5.15) with respect to \\(\\beta\\) and setting it to \\(0\\), we get, \\[\\begin{align} &amp; \\frac{\\partial f(\\mathbb{x}_{j-1}+\\beta\\mathbb{\\delta}_j)}{\\partial \\beta} = 0 \\tag{5.16} \\\\ &amp;\\implies \\mathbb{x}_{j-1}^T\\mathbb{A}\\mathbb{x}_{j-1} + \\beta\\mathbb{\\delta}_j\\mathbb{A}\\mathbb{\\delta}_j - \\mathbb{b}^T\\mathbb{\\delta}_j = 0 \\nonumber \\\\ &amp;\\implies (\\mathbb{x}_{j-1}^T\\mathbb{A} - \\mathbb{b}^T)\\mathbb{\\delta}_j + \\beta\\mathbb{\\delta}_j^T\\mathbb{A}\\mathbb{\\delta}_j = 0 \\tag{5.17} \\end{align}\\] Now, from Eq. (5.4) we can write, \\[\\begin{equation} \\mathbb{r}_j^T=(\\mathbb{A}\\mathbb{x}_{j-1}-\\mathbb{b})^T = \\mathbb{x}_{j-1}^T\\mathbb{A} - \\mathbb{b}^T \\tag{5.18} \\end{equation}\\] where, we have used the fact that \\(\\mathbb{A}^T=\\mathbb{A}\\). So, from Eq. (5.17) we can write, \\[\\begin{equation} \\mathbb{r}_j^T\\mathbb{\\delta}_j+\\beta\\mathbb{\\delta}_j^T\\mathbb{A}\\mathbb{\\delta}_j = 0 \\tag{5.19} \\end{equation}\\] This finally fetches us, \\[\\begin{equation} \\beta_j = -\\frac{\\mathbb{r}_j^T\\mathbb{\\delta}_j}{\\mathbb{\\delta}_j^T\\mathbb{A}\\mathbb{\\delta}_j} \\tag{5.20} \\end{equation}\\] Eq. (5.20) is equivalent to the step-length formulation given by Eq. (??). Theorem 5.3 The convergence of the conjugate direction algorithm, given by Eq. (5.14) and Eq. (5.20), to its solution, takes place in at most \\(n\\) steps, where \\(\\mathbb{x}_0\\in \\mathbb{R}^n\\) is the given initial iterate. This Chapter is under construction "]]
